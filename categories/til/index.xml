<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>til on The more your try, the more your learn</title>
    <link>https://1312047.github.io/categories/til/</link>
    <description>Recent content in til on The more your try, the more your learn</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 20 Sep 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://1312047.github.io/categories/til/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Basic Vim Setup</title>
      <link>https://1312047.github.io/post/2019-09-20-basic-vim-config/</link>
      <pubDate>Fri, 20 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://1312047.github.io/post/2019-09-20-basic-vim-config/</guid>
      <description>Plugin management: https://github.com/junegunn/vim-plug#installation Tree project: https://github.com/scrooloose/nerdtree Code complete: https://github.com/ycm-core/YouCompleteMe#installation Control + P: https://github.com/ctrlpvim/ctrlp.vim Monakai theme: https://github.com/sickill/vim-monokai Vimfile:  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47  call plug#begin(&amp;#39;~/.vim/plugged&amp;#39;)Plug &amp;#39;https://github.com/scrooloose/nerdtree.git&amp;#39;Plug &amp;#39;morhetz/gruvbox&amp;#39;Plug &amp;#39;vim-airline/vim-airline&amp;#39;Plug &amp;#39;scrooloose/nerdcommenter&amp;#39;&amp;#34; Plug &amp;#39;dracula/vim&amp;#39;, { &amp;#39;as&amp;#39;: &amp;#39;dracula&amp;#39; } &amp;#34; Initialize plugin systemcall plug#end()&amp;#34; Set colorscheme &amp;#34; colorscheme gruvbox &amp;#34; Set dark background &amp;#34;set background=dark &amp;#34; Use monokai &amp;#34; syntax enablecolorscheme monokai&amp;#34; Copy clibboardset clipboard=unnamedplus&amp;#34; Use ctrlpset runtimepath^=~/.</description>
    </item>
    
    <item>
      <title>Book Notes: Mateprograming Ruby 2</title>
      <link>https://1312047.github.io/post/2019-09-21-book-notes-ruby-metaprograming-2/</link>
      <pubDate>Fri, 20 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://1312047.github.io/post/2019-09-21-book-notes-ruby-metaprograming-2/</guid>
      <description>RUBY OBJECT MODEL rails g model Movie title:string director:string
1  class Movie &amp;lt; ActiveRecord:Base; end   What about methods such as title= and title, which access object attributes (accessor methods for short)? This is where metaprogramming comes in: Bob doesnâ€™t have to write those methods. Active Record defines them automatically, after inferring their names from the database schema. ActiveRecord::Base reads the schema at runtime, discovers that the movies table has two columns named title and director, and defines accessor methods for two attributes of the same name.</description>
    </item>
    
    <item>
      <title>My Favourite Vscode Extensions</title>
      <link>https://1312047.github.io/post/2019-09-20-vscode-extension/</link>
      <pubDate>Fri, 20 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://1312047.github.io/post/2019-09-20-vscode-extension/</guid>
      <description> Leetcode (https://marketplace.visualstudio.com/items?itemName=shengchen.vscode-leetcode) Turbo console log ( https://marketplace.visualstudio.com/items?itemName=ChakrounAnas.turbo-console-log) Polacode ( https://marketplace.visualstudio.com/items?itemName=pnp.polacode) Path intellisence (https://marketplace.visualstudio.com/items?itemName=christian-kohler.path-intellisense) Vscode-iocns (https://marketplace.visualstudio.com/items?itemName=vscode-icons-team.vscode-icons) Ident-rainbow (https://marketplace.visualstudio.com/items?itemName=oderwat.indent-rainbow) Bracket Pair Colorizer 2 (https://marketplace.visualstudio.com/items?itemName=CoenraadS.bracket-pair-colorizer-2) Markdown preview (https://marketplace.visualstudio.com/items?itemName=shd101wyy.markdown-preview-enhanced)  </description>
    </item>
    
    <item>
      <title>Terminal macOS Tricks</title>
      <link>https://1312047.github.io/post/2019-08-05-setup-terminal-macos/</link>
      <pubDate>Mon, 05 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://1312047.github.io/post/2019-08-05-setup-terminal-macos/</guid>
      <description>1. Config to show branch in Terminal Open .bash_profile file then add:
1 2 3 4 5  parse_git_branch() { git branch 2&amp;gt; /dev/null | sed -e &amp;#39;/^[^*]/d&amp;#39; -e &amp;#39;s/* \(.*\)/ (\1)/&amp;#39; } export PS1=&amp;#34;\u@\h \[\033[32m\]\w - \$(parse_git_branch)\[\033[00m\] $&amp;#34;   2. Setup to use subl command in macOS Run:
1  sudo ln -s /Applications/Sublime\ Text.app/Contents/SharedSupport/bin/subl /usr/local/bin/subl   3. Setup to use code command in macOS In VSCode Window, press command + shift + P to open package install.</description>
    </item>
    
  </channel>
</rss>